archivesBaseName = "${rootProject.archive_base_name}-fabric"
version = "${rootProject.minecraft_version}-${project.mod_version}"

apply plugin: "com.github.johnrengelman.shadow"


architectury {
    platformSetupLoomIde()
    fabric()
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    common(project(path: ":common", configuration: "namedElements"))
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric"))
    modImplementation("com.github.gregtech-intergalactical:antimatter-fabric:${antimatter_version}"){
        exclude(group: "com.github.gregtech-intergalactical")
    }
    modRuntimeOnly("com.github.gregtech-intergalactical:tesseract-fabric:${tesseract_version}")
    //modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}